local query='query ($endCursor: String) {
  search(
    query: "is:open is:pr archived:false review-requested:toga4"
    type: ISSUE
    first: 100
    after: $endCursor
  ) {
    issueCount
    nodes {
      ... on PullRequest {
        repository {
          nameWithOwner
        }
        number
        title
        author {
          login
        }
        commits(last: 1) {
          nodes {
            commit {
              pushedDate
            }
          }
        }
        reviews(first: 100, author: "toga4") {
          nodes {
            author {
              login
            }
            state
            updatedAt
          }
        }
      }
    }
  }
}'
local jqquery='.data.search.nodes[]
  | select(.reviews.nodes | contains([{author:{login:"toga4"}, state:"APPROVED"}]) | not)
  | {repository:.repository.nameWithOwner, number, title, author:.author.login, lastPushedAt:.commits.nodes[0].commit.pushedDate, lastCommentedAt:(.reviews.nodes|last).updatedAt}
  | "\(.repository);\(.number);\(.title);\(.lastPushedAt>.lastCommentedAt);\(.author);\(.lastPushedAt);\(.lastCommentedAt)"'
local list=$(
  (
    echo "Repository;#;Title;NeedReview;Author;LastPushedAt;LastCommentedAt" \
    && gh api graphql --paginate -f query=${query} -q ${jqquery} \
    | sort -r -t\; -k6
  ) | column -t -s\;
)
local url=$(echo $list | fzf --header-lines=1 --no-multi)
[[ -z $url ]] && return 1
gh browse -R $(echo $url | awk '{print $1}') $(echo $url | awk '{print $2}')
